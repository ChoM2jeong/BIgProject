{"ast":null,"code":"import axios from 'axios';\nexport const FETCH_PROBLEM_REQUEST = 'FETCH_PROBLEM_REQUEST';\nexport const FETCH_PROBLEM_SUCCESS = 'FETCH_PROBLEM_SUCCESS';\nexport const FETCH_PROBLEM_FAILURE = 'FETCH_PROBLEM_FAILURE';\nexport const SUBMIT_ANSWER_REQUEST = 'SUBMIT_ANSWER_REQUEST';\nexport const SUBMIT_ANSWER_SUCCESS = 'SUBMIT_ANSWER_SUCCESS';\nexport const SUBMIT_ANSWER_FAILURE = 'SUBMIT_ANSWER_FAILURE';\nexport const SET_USER_ANSWER = 'SET_USER_ANSWER';\nexport const SET_ERROR = 'SET_ERROR';\nexport const SET_FEEDBACK = 'SET_FEEDBACK';\nexport const fetchProblemRequest = () => ({\n  type: FETCH_PROBLEM_REQUEST\n});\nexport const fetchProblemSuccess = problem => ({\n  type: FETCH_PROBLEM_SUCCESS,\n  payload: problem\n});\nexport const fetchProblemFailure = error => ({\n  type: FETCH_PROBLEM_FAILURE,\n  payload: error\n});\nexport const submitAnswerRequest = () => ({\n  type: SUBMIT_ANSWER_REQUEST\n});\nexport const submitAnswerSuccess = isCorrect => ({\n  type: SUBMIT_ANSWER_SUCCESS,\n  payload: isCorrect\n});\nexport const submitAnswerFailure = error => ({\n  type: SUBMIT_ANSWER_FAILURE,\n  payload: error\n});\nexport const setUserAnswer = answer => ({\n  type: SET_USER_ANSWER,\n  payload: answer\n});\nexport const setError = error => ({\n  type: SET_ERROR,\n  payload: error\n});\nexport const setFeedback = feedback => ({\n  type: SET_FEEDBACK,\n  payload: feedback\n});\nexport const fetchProblem = subject => {\n  return async dispatch => {\n    dispatch(fetchProblemRequest());\n    try {\n      const response = await axios.get(`http://localhost:8080/api/subjects/random/${subject}`);\n      const {\n        q_sub,\n        passage,\n        question,\n        selection\n      } = response.data;\n      const problem = {\n        q_sub,\n        passage,\n        question,\n        selection: parseSelections(selection)\n      };\n      dispatch(fetchProblemSuccess(problem));\n    } catch (error) {\n      dispatch(fetchProblemFailure('지문을 불러오는 중 오류가 발생했습니다.'));\n    }\n  };\n};\nexport const submitAnswer = (qSub, userAnswer) => {\n  return async dispatch => {\n    dispatch(submitAnswerRequest());\n    try {\n      const response = await axios.post('http://localhost:8080/api/subjects/check', {\n        q_sub: qSub,\n        userAnswer: userAnswer + 1\n      });\n      const isCorrect = response.data;\n      dispatch(submitAnswerSuccess(isCorrect));\n      return isCorrect; // 정답 여부 반환\n    } catch (error) {\n      dispatch(submitAnswerFailure('정답을 확인하는 중 오류가 발생했습니다.'));\n      throw error;\n    }\n  };\n};\nexport const fetchFeedback = timeTaken => {\n  return async dispatch => {\n    try {\n      const response = await axios.post('http://localhost:5000/analyze_time', {\n        time_taken: timeTaken\n      });\n      const feedback = response.data.feedback;\n      dispatch(setFeedback(feedback));\n    } catch (error) {\n      dispatch(setError('피드백을 받아오는 중 오류가 발생했습니다.'));\n    }\n  };\n};\nconst parseSelections = selectionText => {\n  const regex = /①|②|③|④|⑤/;\n  return selectionText.split(regex).filter(s => s.trim() !== \"\").map((s, index) => {\n    return `${String.fromCharCode(9312 + index)} ${s.trim()}`;\n  });\n};","map":{"version":3,"names":["axios","FETCH_PROBLEM_REQUEST","FETCH_PROBLEM_SUCCESS","FETCH_PROBLEM_FAILURE","SUBMIT_ANSWER_REQUEST","SUBMIT_ANSWER_SUCCESS","SUBMIT_ANSWER_FAILURE","SET_USER_ANSWER","SET_ERROR","SET_FEEDBACK","fetchProblemRequest","type","fetchProblemSuccess","problem","payload","fetchProblemFailure","error","submitAnswerRequest","submitAnswerSuccess","isCorrect","submitAnswerFailure","setUserAnswer","answer","setError","setFeedback","feedback","fetchProblem","subject","dispatch","response","get","q_sub","passage","question","selection","data","parseSelections","submitAnswer","qSub","userAnswer","post","fetchFeedback","timeTaken","time_taken","selectionText","regex","split","filter","s","trim","map","index","String","fromCharCode"],"sources":["C:/Users/User/Desktop/final/big-1-main/src/redux/actions/todayProblemActions.js"],"sourcesContent":["import axios from 'axios';\n\nexport const FETCH_PROBLEM_REQUEST = 'FETCH_PROBLEM_REQUEST';\nexport const FETCH_PROBLEM_SUCCESS = 'FETCH_PROBLEM_SUCCESS';\nexport const FETCH_PROBLEM_FAILURE = 'FETCH_PROBLEM_FAILURE';\nexport const SUBMIT_ANSWER_REQUEST = 'SUBMIT_ANSWER_REQUEST';\nexport const SUBMIT_ANSWER_SUCCESS = 'SUBMIT_ANSWER_SUCCESS';\nexport const SUBMIT_ANSWER_FAILURE = 'SUBMIT_ANSWER_FAILURE';\nexport const SET_USER_ANSWER = 'SET_USER_ANSWER';\nexport const SET_ERROR = 'SET_ERROR';\nexport const SET_FEEDBACK = 'SET_FEEDBACK';\n\nexport const fetchProblemRequest = () => ({ type: FETCH_PROBLEM_REQUEST });\nexport const fetchProblemSuccess = (problem) => ({ type: FETCH_PROBLEM_SUCCESS, payload: problem });\nexport const fetchProblemFailure = (error) => ({ type: FETCH_PROBLEM_FAILURE, payload: error });\n\nexport const submitAnswerRequest = () => ({ type: SUBMIT_ANSWER_REQUEST });\nexport const submitAnswerSuccess = (isCorrect) => ({ type: SUBMIT_ANSWER_SUCCESS, payload: isCorrect });\nexport const submitAnswerFailure = (error) => ({ type: SUBMIT_ANSWER_FAILURE, payload: error });\n\nexport const setUserAnswer = (answer) => ({ type: SET_USER_ANSWER, payload: answer });\nexport const setError = (error) => ({ type: SET_ERROR, payload: error });\nexport const setFeedback = (feedback) => ({ type: SET_FEEDBACK, payload: feedback });\n\nexport const fetchProblem = (subject) => {\n  return async (dispatch) => {\n    dispatch(fetchProblemRequest());\n    try {\n      const response = await axios.get(`http://localhost:8080/api/subjects/random/${subject}`);\n      const { q_sub, passage, question, selection } = response.data;\n      const problem = { q_sub, passage, question, selection: parseSelections(selection) };\n      dispatch(fetchProblemSuccess(problem));\n    } catch (error) {\n      dispatch(fetchProblemFailure('지문을 불러오는 중 오류가 발생했습니다.'));\n    }\n  };\n};\n\nexport const submitAnswer = (qSub, userAnswer) => {\n  return async (dispatch) => {\n    dispatch(submitAnswerRequest());\n    try {\n      const response = await axios.post('http://localhost:8080/api/subjects/check', { q_sub: qSub, userAnswer: userAnswer + 1 });\n      const isCorrect = response.data;\n      dispatch(submitAnswerSuccess(isCorrect));\n      return isCorrect; // 정답 여부 반환\n    } catch (error) {\n      dispatch(submitAnswerFailure('정답을 확인하는 중 오류가 발생했습니다.'));\n      throw error;\n    }\n  };\n};\n\nexport const fetchFeedback = (timeTaken) => {\n  return async (dispatch) => {\n    try {\n      const response = await axios.post('http://localhost:5000/analyze_time', { time_taken: timeTaken });\n      const feedback = response.data.feedback;\n      dispatch(setFeedback(feedback));\n    } catch (error) {\n      dispatch(setError('피드백을 받아오는 중 오류가 발생했습니다.'));\n    }\n  };\n};\n\nconst parseSelections = (selectionText) => {\n  const regex = /①|②|③|④|⑤/;\n  return selectionText.split(regex).filter(s => s.trim() !== \"\").map((s, index) => {\n    return `${String.fromCharCode(9312 + index)} ${s.trim()}`;\n  });\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,qBAAqB,GAAG,uBAAuB;AAC5D,OAAO,MAAMC,qBAAqB,GAAG,uBAAuB;AAC5D,OAAO,MAAMC,qBAAqB,GAAG,uBAAuB;AAC5D,OAAO,MAAMC,qBAAqB,GAAG,uBAAuB;AAC5D,OAAO,MAAMC,qBAAqB,GAAG,uBAAuB;AAC5D,OAAO,MAAMC,qBAAqB,GAAG,uBAAuB;AAC5D,OAAO,MAAMC,eAAe,GAAG,iBAAiB;AAChD,OAAO,MAAMC,SAAS,GAAG,WAAW;AACpC,OAAO,MAAMC,YAAY,GAAG,cAAc;AAE1C,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,MAAO;EAAEC,IAAI,EAAEV;AAAsB,CAAC,CAAC;AAC1E,OAAO,MAAMW,mBAAmB,GAAIC,OAAO,KAAM;EAAEF,IAAI,EAAET,qBAAqB;EAAEY,OAAO,EAAED;AAAQ,CAAC,CAAC;AACnG,OAAO,MAAME,mBAAmB,GAAIC,KAAK,KAAM;EAAEL,IAAI,EAAER,qBAAqB;EAAEW,OAAO,EAAEE;AAAM,CAAC,CAAC;AAE/F,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,MAAO;EAAEN,IAAI,EAAEP;AAAsB,CAAC,CAAC;AAC1E,OAAO,MAAMc,mBAAmB,GAAIC,SAAS,KAAM;EAAER,IAAI,EAAEN,qBAAqB;EAAES,OAAO,EAAEK;AAAU,CAAC,CAAC;AACvG,OAAO,MAAMC,mBAAmB,GAAIJ,KAAK,KAAM;EAAEL,IAAI,EAAEL,qBAAqB;EAAEQ,OAAO,EAAEE;AAAM,CAAC,CAAC;AAE/F,OAAO,MAAMK,aAAa,GAAIC,MAAM,KAAM;EAAEX,IAAI,EAAEJ,eAAe;EAAEO,OAAO,EAAEQ;AAAO,CAAC,CAAC;AACrF,OAAO,MAAMC,QAAQ,GAAIP,KAAK,KAAM;EAAEL,IAAI,EAAEH,SAAS;EAAEM,OAAO,EAAEE;AAAM,CAAC,CAAC;AACxE,OAAO,MAAMQ,WAAW,GAAIC,QAAQ,KAAM;EAAEd,IAAI,EAAEF,YAAY;EAAEK,OAAO,EAAEW;AAAS,CAAC,CAAC;AAEpF,OAAO,MAAMC,YAAY,GAAIC,OAAO,IAAK;EACvC,OAAO,MAAOC,QAAQ,IAAK;IACzBA,QAAQ,CAAClB,mBAAmB,CAAC,CAAC,CAAC;IAC/B,IAAI;MACF,MAAMmB,QAAQ,GAAG,MAAM7B,KAAK,CAAC8B,GAAG,CAAC,6CAA6CH,OAAO,EAAE,CAAC;MACxF,MAAM;QAAEI,KAAK;QAAEC,OAAO;QAAEC,QAAQ;QAAEC;MAAU,CAAC,GAAGL,QAAQ,CAACM,IAAI;MAC7D,MAAMtB,OAAO,GAAG;QAAEkB,KAAK;QAAEC,OAAO;QAAEC,QAAQ;QAAEC,SAAS,EAAEE,eAAe,CAACF,SAAS;MAAE,CAAC;MACnFN,QAAQ,CAAChB,mBAAmB,CAACC,OAAO,CAAC,CAAC;IACxC,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdY,QAAQ,CAACb,mBAAmB,CAAC,wBAAwB,CAAC,CAAC;IACzD;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMsB,YAAY,GAAGA,CAACC,IAAI,EAAEC,UAAU,KAAK;EAChD,OAAO,MAAOX,QAAQ,IAAK;IACzBA,QAAQ,CAACX,mBAAmB,CAAC,CAAC,CAAC;IAC/B,IAAI;MACF,MAAMY,QAAQ,GAAG,MAAM7B,KAAK,CAACwC,IAAI,CAAC,0CAA0C,EAAE;QAAET,KAAK,EAAEO,IAAI;QAAEC,UAAU,EAAEA,UAAU,GAAG;MAAE,CAAC,CAAC;MAC1H,MAAMpB,SAAS,GAAGU,QAAQ,CAACM,IAAI;MAC/BP,QAAQ,CAACV,mBAAmB,CAACC,SAAS,CAAC,CAAC;MACxC,OAAOA,SAAS,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdY,QAAQ,CAACR,mBAAmB,CAAC,wBAAwB,CAAC,CAAC;MACvD,MAAMJ,KAAK;IACb;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMyB,aAAa,GAAIC,SAAS,IAAK;EAC1C,OAAO,MAAOd,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM7B,KAAK,CAACwC,IAAI,CAAC,oCAAoC,EAAE;QAAEG,UAAU,EAAED;MAAU,CAAC,CAAC;MAClG,MAAMjB,QAAQ,GAAGI,QAAQ,CAACM,IAAI,CAACV,QAAQ;MACvCG,QAAQ,CAACJ,WAAW,CAACC,QAAQ,CAAC,CAAC;IACjC,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdY,QAAQ,CAACL,QAAQ,CAAC,yBAAyB,CAAC,CAAC;IAC/C;EACF,CAAC;AACH,CAAC;AAED,MAAMa,eAAe,GAAIQ,aAAa,IAAK;EACzC,MAAMC,KAAK,GAAG,WAAW;EACzB,OAAOD,aAAa,CAACE,KAAK,CAACD,KAAK,CAAC,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,CAACC,GAAG,CAAC,CAACF,CAAC,EAAEG,KAAK,KAAK;IAC/E,OAAO,GAAGC,MAAM,CAACC,YAAY,CAAC,IAAI,GAAGF,KAAK,CAAC,IAAIH,CAAC,CAACC,IAAI,CAAC,CAAC,EAAE;EAC3D,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}