{"ast":null,"code":"export const ADD_POST = 'ADD_POST';\nexport const UPDATE_POST = 'UPDATE_POST';\nexport const DELETE_POST = 'DELETE_POST';\nexport const LOAD_POSTS = 'LOAD_POSTS';\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\nexport const addPost = post => ({\n  type: ADD_POST,\n  payload: post\n});\nexport const updatePost = (id, updatedPost) => ({\n  type: UPDATE_POST,\n  payload: {\n    id,\n    updatedPost\n  }\n});\nexport const deletePost = id => ({\n  type: DELETE_POST,\n  payload: id\n});\nexport const loadPosts = posts => ({\n  type: LOAD_POSTS,\n  payload: posts\n});\nexport const fetchPosts = () => {\n  return async dispatch => {\n    // api 자리\n    const posts = [{\n      id: 1,\n      title: '첫 번째 게시물',\n      content: '내용1',\n      category: '자유게시판',\n      author: '작성자1',\n      likes: 0,\n      date: '2024-07-10'\n    }, {\n      id: 2,\n      title: '두 번째 게시물',\n      content: '내용2',\n      category: '스터디모집',\n      author: '작성자2',\n      likes: 0,\n      date: '2024-07-11'\n    }];\n    dispatch({\n      type: FETCH_POSTS_SUCCESS,\n      payload: posts\n    });\n  };\n};\nexport const formatDate = dateString => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInMilliseconds = now - date;\n  const diffInHours = Math.floor(diffInMilliseconds / (1000 * 60 * 60));\n  const diffInMinutes = Math.floor(diffInMilliseconds / (1000 * 60));\n  if (diffInMinutes < 60) {\n    return `${diffInMinutes}분 전`;\n  }\n  if (diffInHours < 24) {\n    return `${diffInHours}시간 전`;\n  }\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n  return `${year}.${month}.${day} ${hours}:${minutes}`;\n};\nexport const commentDate = dateString => {\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n  const seconds = String(date.getSeconds()).padStart(2, '0');\n  return `${year}.${month}.${day} ${hours}:${minutes}:${seconds}`;\n};","map":{"version":3,"names":["ADD_POST","UPDATE_POST","DELETE_POST","LOAD_POSTS","FETCH_POSTS_SUCCESS","addPost","post","type","payload","updatePost","id","updatedPost","deletePost","loadPosts","posts","fetchPosts","dispatch","title","content","category","author","likes","date","formatDate","dateString","Date","now","diffInMilliseconds","diffInHours","Math","floor","diffInMinutes","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","commentDate","seconds","getSeconds"],"sources":["C:/Users/User/Desktop/final/front/src/redux/actions/postActions.js"],"sourcesContent":["export const ADD_POST = 'ADD_POST';\nexport const UPDATE_POST = 'UPDATE_POST';\nexport const DELETE_POST = 'DELETE_POST';\nexport const LOAD_POSTS = 'LOAD_POSTS';\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\n\nexport const addPost = (post) => ({\n  type: ADD_POST,\n  payload: post,\n});\n\nexport const updatePost = (id, updatedPost) => ({\n  type: UPDATE_POST,\n  payload: { id, updatedPost },\n});\n\nexport const deletePost = (id) => ({\n  type: DELETE_POST,\n  payload: id,\n});\n\nexport const loadPosts = (posts) => ({\n  type: LOAD_POSTS,\n  payload: posts,\n});\n\nexport const fetchPosts = () => {\n  return async (dispatch) => {\n    // api 자리\n    const posts = [\n      { id: 1, title: '첫 번째 게시물', content: '내용1', category: '자유게시판', author: '작성자1', likes: 0, date: '2024-07-10' },\n      { id: 2, title: '두 번째 게시물', content: '내용2', category: '스터디모집', author: '작성자2', likes: 0, date: '2024-07-11' },\n    ];\n\n    dispatch({\n      type: FETCH_POSTS_SUCCESS,\n      payload: posts,\n    });\n  };\n};\n\nexport const formatDate = (dateString) => {\n  const date = new Date(dateString);\n  const now = new Date();\n  \n  const diffInMilliseconds = now - date;\n  const diffInHours = Math.floor(diffInMilliseconds / (1000 * 60 * 60));\n  const diffInMinutes = Math.floor(diffInMilliseconds / (1000 * 60));\n\n  if (diffInMinutes < 60) {\n    return `${diffInMinutes}분 전`;\n  }\n\n  if (diffInHours < 24) {\n    return `${diffInHours}시간 전`;\n  }\n\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n\n  return `${year}.${month}.${day} ${hours}:${minutes}`;\n};\n\nexport const commentDate = (dateString) => {\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n  const seconds = String(date.getSeconds()).padStart(2, '0');\n  return `${year}.${month}.${day} ${hours}:${minutes}:${seconds}`;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}