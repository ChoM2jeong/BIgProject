{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\final\\\\big-1-main\\\\src\\\\components\\\\js\\\\ScoreChart.js\";\nimport React from \"react\";\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend);\nconst criteriaMap = {\n  rawScore: '원점수',\n  standardScore: '표준점수'\n};\nconst ScoreChart = ({\n  scores,\n  criteria\n}) => {\n  const translatedCriteria = criteriaMap[criteria] || criteria; // 기준을 한글로 변환\n\n  const data = {\n    labels: scores.map(score => `${score.month} ${score.subject}`),\n    datasets: [{\n      type: 'line',\n      label: '등급',\n      data: scores.map(score => 10 - score.grade),\n      // 등급을 반대로 변환\n      borderColor: 'rgba(139, 69, 19, 1)',\n      // 진갈색으로 변경\n      borderWidth: 3,\n      // 선의 두께를 더 두껍게 설정\n      fill: false,\n      yAxisID: 'y2',\n      tension: 0.1,\n      order: 1\n    }, {\n      type: 'bar',\n      label: translatedCriteria,\n      data: scores.map(score => score[criteria]),\n      backgroundColor: scores.map(score => score.subject === '국어' ? 'rgba(255, 99, 132, 1)' : 'rgba(54, 162, 235, 1)'),\n      borderColor: scores.map(score => score.subject === '국어' ? 'rgba(255, 99, 132, 1)' : 'rgba(54, 162, 235, 1)'),\n      borderWidth: 1,\n      yAxisID: 'y1',\n      order: 2\n    }]\n  };\n  const options = {\n    scales: {\n      y1: {\n        beginAtZero: true,\n        position: 'left',\n        ticks: {\n          color: 'black',\n          font: {\n            weight: 'bold'\n          }\n        },\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      },\n      y2: {\n        position: 'right',\n        min: 0,\n        max: 10,\n        ticks: {\n          stepSize: 1,\n          color: 'black',\n          font: {\n            weight: 'bold'\n          },\n          callback: function (value) {\n            return 10 - value; // 등급을 다시 원래 값으로 표시\n          }\n        },\n        grid: {\n          drawOnChartArea: false // only want the grid lines for one axis to show up\n        }\n      },\n      x: {\n        ticks: {\n          color: 'black',\n          font: {\n            weight: 'bold'\n          }\n        },\n        grid: {\n          display: false\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: true,\n        position: 'top',\n        labels: {\n          boxWidth: 20,\n          padding: 20\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            let label = context.dataset.label || '';\n            if (context.dataset.yAxisID === 'y2') {\n              label += `: ${10 - context.raw}`; // 등급 툴팁 표시\n            } else {\n              label += `: ${context.raw}`;\n            }\n            return label;\n          }\n        }\n      }\n    },\n    maintainAspectRatio: false\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    style: {\n      height: '450px',\n      width: '70%',\n      margin: '0 auto'\n    },\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n_c = ScoreChart;\nexport default ScoreChart;\nvar _c;\n$RefreshReg$(_c, \"ScoreChart\");","map":{"version":3,"names":["React","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","LineElement","PointElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","criteriaMap","rawScore","standardScore","ScoreChart","scores","criteria","translatedCriteria","data","labels","map","score","month","subject","datasets","type","label","grade","borderColor","borderWidth","fill","yAxisID","tension","order","backgroundColor","options","scales","y1","beginAtZero","position","ticks","color","font","weight","grid","y2","min","max","stepSize","callback","value","drawOnChartArea","x","display","plugins","legend","boxWidth","padding","tooltip","callbacks","context","dataset","raw","maintainAspectRatio","className","style","height","width","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/final/big-1-main/src/components/js/ScoreChart.js"],"sourcesContent":["import React from \"react\";\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend);\n\nconst criteriaMap = {\n    rawScore: '원점수',\n    standardScore: '표준점수'\n};\n\nconst ScoreChart = ({ scores, criteria }) => {\n    const translatedCriteria = criteriaMap[criteria] || criteria; // 기준을 한글로 변환\n\n    const data = {\n        labels: scores.map(score => `${score.month} ${score.subject}`),\n        datasets: [\n            {\n                type: 'line',\n                label: '등급',\n                data: scores.map(score => 10 - score.grade), // 등급을 반대로 변환\n                borderColor: 'rgba(139, 69, 19, 1)', // 진갈색으로 변경\n                borderWidth: 3, // 선의 두께를 더 두껍게 설정\n                fill: false,\n                yAxisID: 'y2',\n                tension: 0.1,\n                order: 1,\n            },\n            {\n                type: 'bar',\n                label: translatedCriteria,\n                data: scores.map(score => score[criteria]),\n                backgroundColor: scores.map((score) =>\n                    score.subject === '국어' ? 'rgba(255, 99, 132, 1)' : 'rgba(54, 162, 235, 1)'\n                ),\n                borderColor: scores.map((score) =>\n                    score.subject === '국어' ? 'rgba(255, 99, 132, 1)' : 'rgba(54, 162, 235, 1)'\n                ),\n                borderWidth: 1,\n                yAxisID: 'y1',\n                order: 2,\n            },\n        ],\n    };\n\n    const options = {\n        scales: {\n            y1: {\n                beginAtZero: true,\n                position: 'left',\n                ticks: {\n                    color: 'black',\n                    font: {\n                        weight: 'bold',\n                    },\n                },\n                grid: {\n                    color: 'rgba(0, 0, 0, 0.1)',\n                },\n            },\n            y2: {\n                position: 'right',\n                min: 0,\n                max: 10,\n                ticks: {\n                    stepSize: 1,\n                    color: 'black',\n                    font: {\n                        weight: 'bold',\n                    },\n                    callback: function(value) {\n                        return 10 - value; // 등급을 다시 원래 값으로 표시\n                    }\n                },\n                grid: {\n                    drawOnChartArea: false, // only want the grid lines for one axis to show up\n                },\n            },\n            x: {\n                ticks: {\n                    color: 'black',\n                    font: {\n                        weight: 'bold',\n                    },\n                },\n                grid: {\n                    display: false,\n                },\n            },\n        },\n        plugins: {\n            legend: {\n                display: true,\n                position: 'top',\n                labels: {\n                    boxWidth: 20,\n                    padding: 20\n                }\n            },\n            tooltip: {\n                callbacks: {\n                    label: function(context) {\n                        let label = context.dataset.label || '';\n                        if (context.dataset.yAxisID === 'y2') {\n                            label += `: ${10 - context.raw}`; // 등급 툴팁 표시\n                        } else {\n                            label += `: ${context.raw}`;\n                        }\n                        return label;\n                    }\n                }\n            }\n        },\n        maintainAspectRatio: false,\n    };\n\n    return (\n        <div className=\"chart-container\" style={{ height: '450px', width: '70%', margin: '0 auto' }}>\n            <Bar data={data} options={options} />\n        </div>\n    );\n};\n\nexport default ScoreChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}