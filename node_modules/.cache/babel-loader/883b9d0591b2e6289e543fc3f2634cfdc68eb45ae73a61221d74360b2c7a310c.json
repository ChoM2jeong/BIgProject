{"ast":null,"code":"import axios from \"axios\";\nimport { Cookies } from 'react-cookie';\nexport const login = (id, password) => {\n  return async dispatch => {\n    if (!id || !password) {\n      alert('정보를 입력해주세요');\n      return;\n    }\n    const data = new URLSearchParams();\n    data.append('username', id);\n    data.append('password', password);\n    try {\n      const response = await axios.post('http://localhost:8080/login', data, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        withCredentials: true\n      });\n      const authorizationHeader = response.headers['authorization'];\n      if (!authorizationHeader) {\n        alert('아이디나 비밀번호가 정확하지 않습니다.');\n        return;\n      }\n      const cookies = new Cookies();\n      cookies.set('Authorization', response.headers.get('Authorization'), {\n        path: '/'\n      });\n      const userId = response.data.userId;\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          id: userId\n        }\n      });\n      window.location.reload();\n    } catch (error) {\n      console.error(error);\n      alert('로그인 정보가 정확하지 않습니다.');\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: '로그인 정보가 정확하지 않습니다.'\n      });\n    }\n  };\n};\nexport const register = form => {\n  return async dispatch => {\n    const requestData = {\n      memberEmail: form.email || '',\n      memberUsername: form.id || '',\n      memberName: form.name || '',\n      memberPassword: form.password || '',\n      memberGrade: form.grade || '',\n      authNum: form.verificationCode || ''\n    };\n\n    //한곳이 비어있으면 다 입력해야함\n    const allFieldsFilled = Object.values(requestData).every(value => value.trim() !== '');\n    if (!allFieldsFilled) {\n      alert('모든 곳을 입력해주세요');\n      return;\n    }\n\n    // Check if email and username exist\n    const emailExists = await checkEmailExists(form.email);\n    const usernameExists = await checkUsernameExists(form.id);\n    if (usernameExists) {\n      alert('이미 존재하는 아이디입니다.');\n      return;\n    }\n\n    // Check if password and confirmPassword match\n    if (form.password !== form.confirmPassword) {\n      alert('확인 비밀번호와 일치하지 않습니다');\n      return;\n    }\n    if (emailExists) {\n      alert('이미 존재하는 이메일입니다.');\n      return;\n    }\n    if (!form.isVerified) {\n      alert(\"이메일 인증을 하시길 바랍니다.\");\n      return;\n    }\n    try {\n      const response = await axios.post('http://localhost:8080/member/register', requestData, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Response:', response.data);\n      dispatch({\n        type: 'REGISTER_SUCCESS'\n      });\n      alert(\"성공적으로 회원가입 하였습니다.\");\n      window.location.replace('/');\n    } catch (error) {\n      if (error.response) {\n        console.alert(error.response.data);\n        dispatch({\n          type: 'REGISTER_FAILURE',\n          payload: '회원가입 중 오류가 발생했습니다.'\n        });\n      } else {\n        console.error('원인 모를 에러 발생', error);\n      }\n    }\n  };\n};\nexport const findId = email => {\n  const requestData = {\n    \"email\": email\n  };\n  return async dispatch => {\n    try {\n      const response = await axios.post('http://localhost:8080/Mail/mailSend/findUsername', requestData, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      dispatch({\n        type: 'FIND_ID_SUCCESS',\n        payload: '작성해주신 이메일로 아이디를 전송했습니다.'\n      });\n    } catch (error) {\n      if (error.response) {\n        alert(error.response.data);\n        console.error(\"존재하지 않는 회원입니다.\");\n      } else {\n        console.error('원인 모를 에러 발생', error);\n      }\n    }\n  };\n};\nexport const resetFindId = () => {\n  return {\n    type: 'FIND_ID_FAILURE'\n  };\n};\nexport const logout = () => {\n  return async dispatch => {\n    const cookies = new Cookies();\n    const jwtToken = cookies.get('Authorization');\n    cookies.remove('Authorization');\n    const bearerToken = jwtToken.startsWith('Bearer ') ? jwtToken : `Bearer ${jwtToken}`;\n    const requestData = {\n      jwt: bearerToken\n    };\n    try {\n      const response = await axios.post(`http://localhost:8080/member/logout`, requestData, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(jwtToken);\n      cookies.remove('Authorization', {\n        path: '/'\n      });\n      dispatch({\n        type: 'LOGOUT'\n      });\n      window.location.reload();\n    } catch (error) {\n      cookies.remove('Authorization', {\n        path: '/'\n      });\n      dispatch({\n        type: 'LOGOUT'\n      });\n      window.location.reload();\n      console.log(\"logout failed\");\n      console.error(error);\n    }\n  };\n};\n\n// 예시용 fake API 함수\nconst fakeLoginApi = async (id, password) => {\n  console.log(`Attempting login with ID: ${id}, Password: ${password}`);\n  return new Promise(resolve => {\n    setTimeout(() => {\n      if (id === 'testuser' && password === 'password123') {\n        resolve({\n          success: true,\n          user: {\n            email: 'test@test.com',\n            username: 'testuser',\n            school: 'test highschool'\n          }\n        });\n      } else {\n        resolve({\n          success: false,\n          message: '아이디 또는 비밀번호가 잘못되었습니다.'\n        });\n      }\n    }, 1000);\n  });\n};\nconst fakeRegisterApi = async form => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true\n      });\n    }, 1000);\n  });\n};\nconst fakeFindIdApi = async email => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        message: '작성해주신 이메일로 아이디를 전송했습니다.'\n      });\n    }, 1000);\n  });\n};\nexport const fetchUsername = jwtToken => {\n  return async dispatch => {\n    try {\n      const bearerToken = jwtToken.startsWith('Bearer ') ? jwtToken : `Bearer ${jwtToken}`;\n      const response = await axios.get(`http://localhost:8080/member/username`, {\n        headers: {\n          Authorization: bearerToken\n        }\n      });\n      console.log(\"bearerToken\" + bearerToken);\n      dispatch({\n        type: 'SET_USERNAME',\n        payload: response.data\n      });\n    } catch (error) {\n      console.error(error);\n      const cookies = new Cookies();\n      const Token = cookies.get('Authorization');\n      cookies.remove('Authorization');\n      dispatch({\n        type: 'LOGOUT'\n      });\n      dispatch({\n        type: 'SET_USERNAME',\n        payload: null\n      });\n      window.location.reload();\n    }\n  };\n};\nexport const initializeLoginState = () => {\n  return async dispatch => {\n    const cookies = new Cookies();\n    const jwtToken = cookies.get('Authorization');\n    if (jwtToken) {\n      // 토큰 유효성 검사를 여기서 하세요\n      dispatch({\n        type: 'LOGIN_SUCCESS'\n      });\n    }\n  };\n};\n\n//이메일 존재 확인\nexport const checkEmailExists = async email => {\n  try {\n    const response = await axios.get(`http://localhost:8080/member/check-email/${email}`);\n    return response.data; // true or false\n  } catch (error) {\n    console.error('Error checking email existence:', error);\n    return false;\n  }\n};\n\n//유저이름 존재 확인\nconst checkUsernameExists = async username => {\n  try {\n    const response = await axios.get(`http://localhost:8080/member/check-username/${username}`);\n    return response.data; // true or false\n  } catch (error) {\n    console.error('Error checking username existence:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["axios","Cookies","login","id","password","dispatch","alert","data","URLSearchParams","append","response","post","headers","withCredentials","authorizationHeader","cookies","set","get","path","userId","type","payload","window","location","reload","error","console","register","form","requestData","memberEmail","email","memberUsername","memberName","name","memberPassword","memberGrade","grade","authNum","verificationCode","allFieldsFilled","Object","values","every","value","trim","emailExists","checkEmailExists","usernameExists","checkUsernameExists","confirmPassword","isVerified","log","replace","findId","resetFindId","logout","jwtToken","remove","bearerToken","startsWith","jwt","fakeLoginApi","Promise","resolve","setTimeout","success","user","username","school","message","fakeRegisterApi","fakeFindIdApi","fetchUsername","Authorization","Token","initializeLoginState"],"sources":["C:/Users/User/Desktop/final/front/src/redux/actions/authActions.js"],"sourcesContent":["import axios from \"axios\";\nimport { Cookies } from 'react-cookie';\n\nexport const login = (id, password) => {\n    return async (dispatch) => {\n      if (!id || !password) {\n        alert('정보를 입력해주세요');\n        return;\n      }\n\n      const data = new URLSearchParams();\n      data.append('username', id);\n      data.append('password', password);\n\n      try {\n        const response = await axios.post('http://localhost:8080/login', data, {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          withCredentials: true,\n        });\n\n        const authorizationHeader = response.headers['authorization'];\n      \n        if (!authorizationHeader) {\n          alert('아이디나 비밀번호가 정확하지 않습니다.');\n        \n          return;\n        }\n  \n        const cookies = new Cookies();\n        cookies.set('Authorization', response.headers.get('Authorization'), {\n          path: '/',\n        });\n        const userId = response.data.userId;\n\n        dispatch({ type: 'LOGIN_SUCCESS', payload: { id: userId } });\n        window.location.reload();\n      } catch (error) {\n        console.error(error);\n        alert('로그인 정보가 정확하지 않습니다.');\n        dispatch({ type: 'LOGIN_FAILURE', payload: '로그인 정보가 정확하지 않습니다.' });\n      }\n    };\n  };\n  \n  export const register = (form) => {\n    return async (dispatch) => {\n      const requestData = {\n        memberEmail: form.email || '',\n        memberUsername: form.id || '',\n        memberName: form.name || '',\n        memberPassword: form.password || '',\n        memberGrade: form.grade || '',\n        authNum:form.verificationCode || '',\n      };\n\n      //한곳이 비어있으면 다 입력해야함\n      const allFieldsFilled = Object.values(requestData).every(value => value.trim() !== '');\n      \n\n      if (!allFieldsFilled) {\n        alert('모든 곳을 입력해주세요');\n        return;\n      }\n\n      // Check if email and username exist\n      const emailExists = await checkEmailExists(form.email);\n      const usernameExists = await checkUsernameExists(form.id);\n\n      if (usernameExists) {\n        alert('이미 존재하는 아이디입니다.');\n        return;\n      }\n      \n      // Check if password and confirmPassword match\n      if (form.password !== form.confirmPassword) {\n        alert('확인 비밀번호와 일치하지 않습니다');\n        return;\n      }\n  \n      \n  \n      if (emailExists) {\n        alert('이미 존재하는 이메일입니다.');\n        return;\n      }\n  \n      if(!form.isVerified){\n        alert(\"이메일 인증을 하시길 바랍니다.\");\n        return;\n      }\n\n      try {\n        const response = await axios.post('http://localhost:8080/member/register', requestData, {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n  \n  \n        console.log('Response:', response.data);\n        dispatch({ type: 'REGISTER_SUCCESS' });\n        alert(\"성공적으로 회원가입 하였습니다.\")\n        window.location.replace('/');\n        \n      } catch (error) {\n        if (error.response) {\n          console.alert(error.response.data);\n          dispatch({ type: 'REGISTER_FAILURE', payload: '회원가입 중 오류가 발생했습니다.' });\n          \n        }else{\n          console.error('원인 모를 에러 발생', error);\n          \n        }\n      }\n\n    };\n  };\n  \n  export const findId = (email) => {\n    const requestData = {\n      \"email\": email\n    };\n\n    \n\n    return async (dispatch) => {\n      try {\n        const response = await axios.post('http://localhost:8080/Mail/mailSend/findUsername', requestData, {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        \n        dispatch({ type: 'FIND_ID_SUCCESS', payload: '작성해주신 이메일로 아이디를 전송했습니다.'});\n      } catch (error) {\n        if (error.response) {\n          alert(error.response.data);\n          console.error(\"존재하지 않는 회원입니다.\")\n        }else{\n          console.error('원인 모를 에러 발생', error);\n        }\n      }\n    };\n  };\n\n  export const resetFindId = () => {\n    return { type: 'FIND_ID_FAILURE'};\n  };\n  \n  export const logout = () => {\n    return async(dispatch) => {\n      const cookies = new Cookies();\n      const jwtToken = cookies.get('Authorization');\n      cookies.remove('Authorization');\n      \n      const bearerToken = jwtToken.startsWith('Bearer ') ? jwtToken : `Bearer ${jwtToken}`;\n  \n      const requestData = {\n        jwt : bearerToken\n      };\n  \n      try {\n        const response = await axios.post(`http://localhost:8080/member/logout`,requestData, {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        console.log(jwtToken);\n        cookies.remove('Authorization', { path: '/' });\n        dispatch({ type: 'LOGOUT' });\n        window.location.reload();\n      } catch (error) {\n        \n        cookies.remove('Authorization', { path: '/' });\n        dispatch({ type: 'LOGOUT' });\n        window.location.reload();\n        console.log(\"logout failed\")\n        console.error(error);\n      }\n      \n      \n     \n    };\n  };\n  \n  // 예시용 fake API 함수\n  const fakeLoginApi = async (id, password) => {\n    console.log(`Attempting login with ID: ${id}, Password: ${password}`);\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        if (id === 'testuser' && password === 'password123') {\n          resolve({ success: true, user: { email: 'test@test.com', username: 'testuser', school: 'test highschool' } });\n        } else {\n          resolve({ success: false, message: '아이디 또는 비밀번호가 잘못되었습니다.' });\n        }\n      }, 1000);\n    });\n  };\n  \n  const fakeRegisterApi = async (form) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ success: true });\n      }, 1000);\n    });\n  };\n  \n\n\n\n  const fakeFindIdApi = async (email) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ success: true, message: '작성해주신 이메일로 아이디를 전송했습니다.' });\n      }, 1000);\n    });\n  };\n\n\n  export const fetchUsername = (jwtToken) => {\n    return async (dispatch) => {\n      try {\n        const bearerToken = jwtToken.startsWith('Bearer ') ? jwtToken : `Bearer ${jwtToken}`;\n  \n        const response = await axios.get(`http://localhost:8080/member/username`, {\n          headers: {\n            Authorization: bearerToken,\n          },\n        });\n        console.log(\"bearerToken\"+bearerToken)\n        dispatch({ type: 'SET_USERNAME', payload: response.data });\n      } catch (error) {\n        console.error(error);\n        const cookies = new Cookies();\n        const Token = cookies.get('Authorization');\n        cookies.remove('Authorization');\n        \n        dispatch({ type: 'LOGOUT' });\n        dispatch({ type: 'SET_USERNAME', payload: null });\n        window.location.reload();\n      }\n    };\n  };\n  \n  export const initializeLoginState = () => {\n    return async (dispatch) => {\n      const cookies = new Cookies();\n      const jwtToken = cookies.get('Authorization');\n      if (jwtToken) {\n        // 토큰 유효성 검사를 여기서 하세요\n        dispatch({ type: 'LOGIN_SUCCESS'});\n      }\n    }\n  };\n\n//이메일 존재 확인\nexport const checkEmailExists = async (email) => {\n  try {\n    const response = await axios.get(`http://localhost:8080/member/check-email/${email}`);\n    return response.data; // true or false\n  } catch (error) {\n    console.error('Error checking email existence:', error);\n    return false;\n  }\n};\n\n//유저이름 존재 확인\nconst checkUsernameExists = async (username) => {\n  try {\n    const response = await axios.get(`http://localhost:8080/member/check-username/${username}`);\n    return response.data; // true or false\n  } catch (error) {\n    console.error('Error checking username existence:', error);\n    return false;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}